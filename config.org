#+TITLE: Emacs configuration
+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Set up package.el
#+begin_src emacs-lisp
  (require 'package)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

* Use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+end_src

* Set my personal information

#+begin_src emacs-lisp
  (setq user-full-name    "Adalberto Garcia"
        user-mail-address "mistergamer37@gmail.com")
#+end_src

* Set defaul directory to

#+begin_src emacs-lisp
  (setq default-directory "C:/Users/rusty/")
#+end_src

* Set font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Hack NFM"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Hack NFM"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Hack NFM"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "Hack NFM-11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)
#+end_src

* UI Settings
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode 0)
  (setq transient-mark-mode t)
  (scroll-bar-mode -1)
  (setq visible-bell 1)
  (display-time-mode)
  (setq inhibit-startup-message t
        initial-scratch-message "Caution, this pc has been caught with ilegal content."
        cursor-type 'hollow)
  (setq frame-title-format '("" "%b - Living The Dream (•̀ᴗ•́)و"))

  (use-package centaur-tabs
    :demand
    :config
    (setq centaur-tabs-style "wave"
          centaur-tabs-height 20)
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))

  (use-package diminish)
#+end_src

* Modus Themes

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

* Electric Pair Mode

#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src

* Ido Mode

#+begin_src emacs-lisp
  (use-package ido
    :config
    (ido-mode t)
    (setq ido-enable-flex-matching t
          ido-everywhere t
          ido-max-prospects 50
          ido-max-window-height 0.25))

  (use-package ido-completing-read+
    :init (ido-ubiquitous-mode 1))

  (use-package ido-yes-or-no
    :init (ido-yes-or-no-mode 1))
#+end_src
* M-x Package

#+begin_src emacs-lisp
  (use-package smex
    :bind ("M-x" . smex))
#+end_src

* Web Mode

Some packages for web development

** Web - Mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.tpl\\'" "\\.blade\\.php\\'" "\\.jsp\\'" "\\.as[cp]x\\'"
           "\\.erb\\'" "\\.html.?\\'" "/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'"
           "\\.jinja2?\\'" "\\.mako\\'" "\\.vue\\'" "_template\\.txt" "\\.ftl\\'"))
#+end_src

** Emmet - Mode

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (web-mode sgml-mode css-mode)
    :bind (:map emmet-mode-keymap
                ("<backtab>" . emmet-expand-line)
                ("\C-c TAB" . emmet-expand-line)
                ("C-M-p" . emmet-prev-edit-point)
                ("C-M-n" . emmet-next-edit-point))
    :config
    (setq emmet-move-cursor-between-quotes t)
    (setq emmet-move-cursor-after-expanding t))
#+end_src

** Js2 - Mode

#+begin_src emacs-lisp
  (use-package js2-mode
    :hook (javascript-mode . js2-mode))
#+end_src

* Code Completion
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . global-company-mode))
  (use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-minor-mode))
  (use-package yasnippet-snippets)
#+end_src
* Sql Set Up
#+begin_src emacs-lisp
  (setq sql-mysql-options '("-C" "-f" "-t" "-n")) ; for windows
  (add-to-list 'same-window-buffer-names "*SQL*")
#+end_src

** SqlUp Mode
#+begin_src emacs-lisp
  (use-package sqlup-mode
    :hook (sql-mode . sqlup-mode))
#+end_src

** Sql Better Indent

#+begin_src emacs-lisp
  (use-package sql-indent
    :hook (sql-mode . sqlind-minor-mode))
#+end_src

* Ace Jump Mode

#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :bind ("C-c t" . ace-jump-mode)
    ("C-c l" . ace-jump-line-mode))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Hack NFM" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :diminish org-mode
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("c:/Users/rusty/Desktop/personal.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (sql . t)
       (js . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

  (defun edit-configs ()
    "Opens the README.org file."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") #'edit-configs)
#+end_src

* 

* Small configs
#+begin_src emacs-lisp

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook
                  dired-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'emacs-startup-hook 'toggle-frame-fullscreen)
  (setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq confirm-kill-processes nil)
  (setq ring-bell-function 'ignore)
  (setq echo-keystrokes 0.1)
  (setq-default create-lockfiles nil)
  (setq-default compilation-always-kill t) ; kill compilation process before starting another
  (setq-default compilation-ask-about-save nil) ; save all buffers on `compile'
  (setq-default compilation-scroll-output t)
  (setq ad-redefinition-action 'accept)
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))
  (setq require-final-newline t)
  (put 'erase-buffer 'disabled nil)
  (add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.bb\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.bbclass\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))

  (recentf-mode 1)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)
  (setq truncate-lines t)
  (defun my-change-window-divider ()
    (let ((display-table (or buffer-display-table standard-display-table)))
      (set-display-table-slot display-table 5 ?│)
      (set-window-display-table (selected-window) display-table)))

  (add-hook 'window-configuration-change-hook 'my-change-window-divider)
#+end_src


